{{- if .Values.controller.enabled -}}
{{- $redisEnvVar := include "base.findEnvValue" (dict "Envs" .Values.env "EnvVarName" "PAPERLESS_REDIS") -}}
{{- if or (not (or .Values.redis.enabled $redisEnvVar)) (and .Values.redis.enabled $redisEnvVar) -}}
  {{- fail "Either \".Values.redis.enabled\" or the environment variable \"PAPERLESS_REDIS\" have to be set!" -}}
{{- end -}}
apiVersion: apps/v1
kind: {{ include "base.controller.kind" . }}
metadata:
  name: {{ include "paperless.fullname" . }}
  labels:
    {{- include "paperless.labels" . | nindent 4 }}
    {{- with .Values.controller.labels }}
    {{ toYaml . | indent 4 }}
    {{- end }}
  {{- with .Values.controller.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.controller.replicas }}
  replicas: {{ .Values.controller.replicas }}
  {{- end }}
  {{- if eq (include "base.controller.kind" . ) "StatefulSet" }}
  serviceName: {{ include "paperless.fullname" . }}-headless
  {{- end }}
  selector:
    matchLabels:
      {{- include "paperless.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.controller.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "paperless.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "paperless.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- with .Values.ports.http }}
            {{- if .enabled }}
            - name: http
              containerPort: {{ .port }}
              protocol: {{ default "TCP" .protocol | quote }}
            {{- end }}
            {{- end }}
          env:
            {{- range $i, $val := .Values.env }}
            {{- if $val.value }}
            - name: {{ $val.name | quote }}
              value: {{ $val.value | quote }}
            {{- else if $val.valueFrom }}
            - name: {{ $val.name | quote }}
              valueFrom:
                {{- toYaml $val.valueFrom | nindent 16 }}
            {{- end }}
            {{- if eq $val.name "TZ" }}
            - name: PAPERLESS_TIME_ZONE
              value: {{ $val.value | quote }}
            {{- end }}
            {{- end }}
            {{- if eq (include "paperless.consumption.enabled" .) "true" }}
            - name: PAPERLESS_CONSUMPTION_DIR
              value: {{ include "paperless.consumption.mountPath" . }}
            {{- end }}
            {{- if eq (include "paperless.media.enabled" .) "true" }}
            - name: PAPERLESS_MEDIA_ROOT
              value: {{ include "paperless.media.mountPath" . }}
            {{- end }}
            {{- if eq (include "paperless.trash.enabled" .) "true" }}
            - name: PAPERLESS_TRASH_DIR
              value: {{ include "paperless.trash.mountPath" . }}
            {{- end }}
            {{- if .Values.redis.enabled }}
            - name: PAPERLESS_REDIS
              value: {{ printf "redis://%s:%v" (include "redis.fullname" .Subcharts.redis) .Values.redis.ports.redis.port }}
            {{- end }}
            {{- if or .Values.secret.create (not (empty .Values.secret.existingSecret)) }}
            {{- range $key, $val := .Values.secret.values }}
            {{- if and $key $val }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                {{- if $.Values.secret.existingSecret }}
                  name: {{ $.Values.secret.existingSecret }}
                {{- else }}
                  name: {{ printf "%s-secrets" (include "paperless.fullname" $ ) }}
                {{- end }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if and .Values.ports.http.enabled (eq (include "paperless.fullname" .) "paperless") }}
            - name: PAPERLESS_PORT
              value: {{ quote .Values.ports.http.port }}
            {{- end }}
          volumeMounts:
            - name: storage-volume
              mountPath: {{ .Values.persistentVolumeClaim.mountPath }}/data
              subPath: data
            - name: storage-volume
              mountPath: {{ .Values.persistentVolumeClaim.mountPath }}/media
              subPath: media
            {{- if eq (include "paperless.consumption.enabled" .) "true" }}
            - name: consumption-volume
              mountPath: {{ include "paperless.consumption.mountPath" . }}
            {{- end }}
            {{- if eq (include "paperless.media.enabled" .) "true" }}
            - name: media-volume
              mountPath: {{ include "paperless.media.mountPath" . }}
            {{- end }}
            {{- if eq (include "paperless.export.enabled" .) "true" }}
            - name: export-volume
              mountPath: {{ include "paperless.export.mountPath" . }}
            {{- end }}
            {{- if eq (include "paperless.trash.enabled" .) "true" }}
            - name: trash-volume
              mountPath: {{ include "paperless.trash.mountPath" . }}
            {{- end }}
          startupProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources: {{ if not .Values.resources -}}{}{{- end }}
            {{- if .Values.resources }}
            {{- toYaml .Values.resources | nindent 12 }}
            {{- end }}
      volumes:
        - name: storage-volume
          persistentVolumeClaim:
            {{- if and .Values.persistentVolumeClaim.create (empty .Values.persistentVolumeClaim.existingPersistentVolumeClaim) }}
            claimName: {{ printf "%s-storage" (include "paperless.fullname" . ) }}
            {{- else }}
            claimName: {{ .Values.persistentVolumeClaim.existingPersistentVolumeClaim }}
            {{- end }}
        {{- if eq (include "paperless.consumption.enabled" .) "true" -}}
        {{- $_ := set .Values.consumption "name" "consumption-volume" -}}
        {{- include "base.persistence.volumeSpec" .Values.consumption | nindent 8 }}
        {{- end -}}
        {{- if eq (include "paperless.media.enabled" .) "true" -}}
        {{- $_ := set .Values.media "name" "media-volume" -}}
        {{- include "base.persistence.volumeSpec" .Values.media | nindent 8 }}
        {{- end -}}
        {{- if eq (include "paperless.export.enabled" .) "true" -}}
        {{- $_ := set .Values.export "name" "export-volume" -}}
        {{- include "base.persistence.volumeSpec" .Values.export | nindent 8 }}
        {{- end -}}
        {{- if eq (include "paperless.trash.enabled" .) "true" -}}
        {{- $_ := set .Values.trash "name" "trash-volume" -}}
        {{- include "base.persistence.volumeSpec" .Values.trash | nindent 8 }}
        {{- end -}}
      {{- if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
